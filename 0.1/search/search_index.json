{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SonyCi","text":"<p>A SonyCi API client for Python</p>"},{"location":"#install","title":"Install","text":"<p>Install instructions can be found on the install page</p>"},{"location":"#reference","title":"Reference","text":"<p>Further details can be found in the reference section</p>"},{"location":"#credits","title":"Credits","text":"<p>Created by WGBH-MLA for the CLAMS project</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#clone-the-repository","title":"Clone the repository::","text":"<pre><code>git clone https://github.com/WGBH-MLA/sonyci.git\ncd sonyci\n</code></pre>"},{"location":"install/#install-with-pdm","title":"Install with PDM","text":"<p>PDM is used as the packaging manager. It can be installed with <code>pip install pdm</code>.</p> <p>Install the project with development dependencies:</p> <pre><code>pdm install\n</code></pre> <p>Activate your virtual environment</p> <pre><code>$(pdm venv activate)\n</code></pre> <p>What is <code>$(pdm venv activate)</code>?</p> <p><code>pdm venv activate</code> outputs the command needed to activate your virtual environment.</p> <p>The <code>$()</code> wrapper evaluates it in your current shell context.</p> Install with venv <p>If PDM is not available, it can also be installed with pip. It is recommeneded to install to a virtual environment using <code>venv</code>:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Install the package</p> <pre><code>pip install .\n</code></pre> <p>Deactivate</p> <p>To deactivate the virtual environmet, run the <code>deactivate</code> command.</p> <pre><code>deactivate\n</code></pre>"},{"location":"install/#login","title":"Login","text":"<p>The first time you run the application, you will need to get an access token. You can do this with the <code>login</code> command:</p> <pre><code>ci login\n</code></pre>"},{"location":"install/#credentials","title":"Credentials","text":"<p>You will need to provide your <code>username</code> and <code>password</code>, as well as your <code>client_id</code> and <code>client_secret</code>. These can be provided as command line options, or (recommended) as <code>ENVIRONMENT_VARIABLES</code>:</p> <p>Create a file called <code>.cred</code> with the following contents, and add your credentials:</p> <pre><code>export CI_USERNAME=\nexport CI_PASSWORD=\nexport CI_CLIENT_ID=\nexport CI_CLIENT_SECRET=\nexport CI_WORKSPACE_ID=\n</code></pre> <p>Activate the variables:</p> <pre><code>source .cred\n</code></pre> <p>Dot notation</p> <p>Alternate notation (may not be available in your terminal):</p> <pre><code>. .cred\n</code></pre> <p>Now you can login and get an access token:</p> <pre><code>ci login\n</code></pre> <p>This will save a file called <code>.token</code> in the current directory. This file will be used to authenticate future requests, and you do not need to login again until the token expires.</p>"},{"location":"install/#run-the-application","title":"Run the application","text":"<p>Now you are ready to run the application:</p> <pre><code>ci -h\n</code></pre> <p>See the CLI reference for more details.</p>"},{"location":"interpreter/","title":"Interpreter","text":"In\u00a0[\u00a0]: Copied! <pre>import logging\n\nlogging.getLogger('requests.packages.urllib3').setLevel(logging.DEBUG)\n</pre> import logging  logging.getLogger('requests.packages.urllib3').setLevel(logging.DEBUG)  <p>Then, create a <code>SonyCi</code> instance with those credentials:</p> In\u00a0[\u00a0]: Copied! <pre>from ci_config import *\nfrom sonyci import SonyCi, Config\n\nci = SonyCi(\n    username=username,\n    password=password,\n    client_id=client_id,\n    client_secret=client_secret,\n    workspace_id=workspace_id,\n)\n</pre> from ci_config import * from sonyci import SonyCi, Config  ci = SonyCi(     username=username,     password=password,     client_id=client_id,     client_secret=client_secret,     workspace_id=workspace_id, )  <p>Now, you can use the API:</p> In\u00a0[\u00a0]: Copied! <pre>ci(f'workspaces/{ci.workspace_id}')\n</pre> ci(f'workspaces/{ci.workspace_id}') In\u00a0[\u00a0]: Copied! <pre>from requests_oauth2client.tokens import BearerTokenSerializer\n\n\nwith open('../.token') as f:\n    token = BearerTokenSerializer().loads(f.read())\n</pre> from requests_oauth2client.tokens import BearerTokenSerializer   with open('../.token') as f:     token = BearerTokenSerializer().loads(f.read()) In\u00a0[\u00a0]: Copied! <pre>from sonyci.sonyci import SonyCi\n\n\nci = SonyCi(t=token)\n</pre> from sonyci.sonyci import SonyCi   ci = SonyCi(t=token)  In\u00a0[\u00a0]: Copied! <pre>ci('workspaces')\n</pre> ci('workspaces') In\u00a0[\u00a0]: Copied! <pre>ci = SonyCi.load_from_toml('../ci.toml')\nci('workspaces')\n</pre> ci = SonyCi.load_from_toml('../ci.toml') ci('workspaces')"},{"location":"interpreter/#interpreter","title":"Interpreter\u00b6","text":""},{"location":"interpreter/#token","title":"Token\u00b6","text":"<p>The first step is to get a token from SonyCi. This is done by logging in with a username and password. The token is then used to authenticate all subsequent requests to the API.</p>"},{"location":"interpreter/#optional-enable-debug-log","title":"Optional: enable DEBUG log\u00b6","text":"<p>Enable the DEBUG log to see the HTTP requests and responses.</p>"},{"location":"interpreter/#option-1-get-token-by-logging-in","title":"Option 1: Get token by logging in\u00b6","text":"<p>Create a file called <code>ci_config.py</code> and add your username, password, client_id, and client_secret.</p> <pre>username = 'your_username'\npassword = 'your_password'\nclient_id = 'your_client_id'\nclient_secret = 'your_client_secret'\n\nworkspace_id = 'your_workspace_id' # optional\n</pre>"},{"location":"interpreter/#option-2-use-an-existing-token-from-file","title":"Option 2: Use an existing token from file\u00b6","text":"<p>This example creates a new <code>ApiClient</code> using the token from running <code>$ ci login</code></p>"},{"location":"interpreter/#load-from-a-toml-file","title":"Load from a toml file\u00b6","text":"<p>Load the config from a toml file</p>"},{"location":"reference/","title":"Reference","text":"<p>This section describes the implementation of specific code modules.</p>"},{"location":"reference/#modules","title":"Modules","text":"<ul> <li>SonyCi - the primary module</li> <li>CLI - the CLI interface</li> </ul>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#sonyci.cli.ProxyNotFoundError","title":"<code>ProxyNotFoundError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Raised when a specific proxy is not found.</p> Source code in <code>sonyci/cli.py</code> <pre><code>class ProxyNotFoundError(Exception):\n    \"\"\"Raised when a specific proxy is not found.\"\"\"\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.asset","title":"<code>asset(ctx, asset)</code>","text":"<p>Search for files in a Sony CI workspace</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef asset(\n    ctx: Context,\n    asset: Annotated[str, Argument(..., help='The asset ID to search for')],\n):\n    \"\"\"Search for files in a Sony CI workspace\"\"\"\n    ci = SonyCi(\n        t=ctx.parent.params['token'], workspace_id=ctx.parent.params['workspace_id']\n    )\n    log.trace(f'asset {asset}')\n    result = ci.asset(asset)\n    log.success(result)\n    print(dumps(result))\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.download","title":"<code>download(ctx, id, proxy=None, output=None)</code>","text":"<p>Download a file from Sony CI</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef download(\n    ctx: Context,\n    id: Annotated[str, Argument(..., help='The SonyCi ID of the file to download')],\n    proxy: Annotated[ProxyType, Option('--proxy', '-p', help='Download ')] = None,\n    output: Annotated[\n        Optional[Path],\n        Option('--output', '-o', help='The path to download the file to'),\n    ] = None,\n):\n    \"\"\"Download a file from Sony CI\"\"\"\n    ci = SonyCi(t=ctx.parent.params['token'])\n    log.trace(f'download id: {id} proxy: {proxy} output: {output}')\n    result = ci.asset_download(id)\n    link = result['location']\n    if proxy:\n        for p in result['proxies']:\n            if p['type'] == proxy.value:\n                log.debug(f'found proxy {proxy.value}')\n                link = p['location']\n                break\n        # Check if matching proxy was found. Raise an exception if not found.\n        if link == result['location']:\n            raise ProxyNotFoundError(f'proxy {proxy} not found')\n\n    log.trace(f'link: {link}')\n    filename = output or Path(link).name.split('?')[0]\n    log.debug(f'downloading {id} to {filename}')\n    urlretrieve(link, filename)\n    log.success(f'downloaded {id} to {filename}')\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.get","title":"<code>get(ctx, path)</code>","text":"<p>Make a GET request to Sony CI.</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef get(ctx: Context, path: Annotated[str, Argument(..., help='The path to GET')]):\n    \"\"\"Make a GET request to Sony CI.\"\"\"\n    ci = SonyCi(t=ctx.parent.params['token'])\n    log.trace(f'GET {path}')\n    result = ci(path)\n    log.success(result)\n    print(dumps(result))\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.login","title":"<code>login(ctx, username=Option(Ellipsis, '--username', '-u', help='Sony CI username.', envvar='CI_USERNAME'), password=Option(Ellipsis, '--password', '-p', help='Sony CI password.', envvar='CI_PASSWORD'), test=Option(False, '--test', '-t', help='Skips saving the token.'))</code>","text":"<p>Login to Sony CI.</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef login(\n    ctx: Context,\n    username: str = Option(\n        ..., '--username', '-u', help='Sony CI username.', envvar='CI_USERNAME'\n    ),\n    password: str = Option(\n        ..., '--password', '-p', help='Sony CI password.', envvar='CI_PASSWORD'\n    ),\n    test: bool = Option(False, '--test', '-t', help='Skips saving the token.'),\n):\n    \"\"\"Login to Sony CI.\"\"\"\n    from sonyci.utils import get_token\n\n    token: BearerToken = get_token(\n        username,\n        password,\n        ctx.parent.params.get('client_id'),\n        ctx.parent.params.get('client_secret'),\n    )\n    if not test:\n        save_token_to_file(token, '.token')\n    log.success('logged in to Sony CI!')\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.parse_bearer_token","title":"<code>parse_bearer_token(token)</code>","text":"<p>Parse a bearer token from a json string.</p> Source code in <code>sonyci/cli.py</code> <pre><code>def parse_bearer_token(token: str) -&gt; BearerToken:\n    \"\"\"Parse a bearer token from a json string.\"\"\"\n    return BearerToken(loads(token))\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.post","title":"<code>post(ctx, path, data=Argument(help='The data to POST'))</code>","text":"<p>Make a POST request to Sony CI.</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef post(\n    ctx: Context,\n    path: Annotated[str, Argument(..., help='The path to POST')],\n    data=Argument(help='The data to POST'),\n):\n    \"\"\"Make a POST request to Sony CI.\"\"\"\n    ci = SonyCi(t=ctx.parent.params['token'])\n    data = loads(data)\n    log.debug(f'POST {path} {data}')\n    result = ci.post(path, data)\n    log.success(result)\n    print(dumps(result))\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.search","title":"<code>search(ctx, query)</code>","text":"<p>Search for files in a Sony CI workspace</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef search(\n    ctx: Context, query: Annotated[str, Argument(..., help='The query to search for')]\n):\n    \"\"\"Search for files in a Sony CI workspace\"\"\"\n    ci = SonyCi(\n        t=ctx.parent.params['token'], workspace_id=ctx.parent.params['workspace_id']\n    )\n    log.trace(f'search {query}')\n    result = ci.workspace_search(query)\n    log.success(result)\n    print(dumps(result))\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.version_callback","title":"<code>version_callback(value)</code>","text":"<p>Print the version of the program and exit.</p> Source code in <code>sonyci/cli.py</code> <pre><code>def version_callback(value: bool):\n    \"\"\"Print the version of the program and exit.\"\"\"\n    if value:\n        from ._version import __version__\n\n        print(f'v{__version__}')\n\n        raise Exit()\n</code></pre>"},{"location":"reference/sonyci/","title":"SonyCi","text":""},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi","title":"<code>SonyCi</code>","text":"<p>         Bases: <code>Config</code></p> Source code in <code>sonyci/sonyci.py</code> <pre><code>class SonyCi(Config):\n    model_config: ClassVar = {'arbitrary_types_allowed': True}\n\n    \"\"\"A SonyCI client.\"\"\"\n    # This will not be needed when we upgrade to pydantic2,\n    # we will be able to directly overwrite the @cached_property instance\n    t: BearerToken = None\n\n    @property\n    def oauth(self) -&gt; OAuth2Client:\n        \"\"\"Create and cache an OAuth2Client instance.\"\"\"\n        return OAuth2Client(\n            token_endpoint=self.token_url,\n            auth=(self.username, self.password),\n            data={\n                'grant_type': 'password',\n                'client_id': self.client_id,\n                'client_secret': self.client_secret,\n            },\n        )\n\n    @property\n    def token(self) -&gt; BearerToken:\n        \"\"\"Get a token from SonyCI and cache the results.\"\"\"\n        if self.t:\n            return self.t\n        return get_token(\n            username=self.username,\n            password=self.password,\n            client_id=self.client_id,\n            client_secret=self.client_secret,\n        )\n\n    @property\n    def auth(self) -&gt; OAuth2AccessTokenAuth:\n        \"\"\"Create and cache an OAuth2AccessTokenAuth instance.\n\n        This will refresh the token automatically if it is expired.\n        \"\"\"\n        if self.client_id and self.client_secret:\n            return OAuth2AccessTokenAuth(client=self.oauth, token=self.token)\n        return BearerAuth(token=self.token)\n\n    @property\n    def client(self) -&gt; ApiClient:\n        \"\"\"Create and cache an ApiClient instance.\n\n        Example:\n            ```py\n            ci.client.get('workspaces')\n            ```\n        \"\"\"\n        return ApiClient(self.base_url, auth=self.auth)\n\n    def workspaces(self) -&gt; list:\n        return self.get('workspaces')['items']\n\n    def workspace(self) -&gt; dict:\n        \"\"\"Return response of /workspaces/{workspace_id}\"\"\"\n        return self.get(f'workspaces/{self.workspace_id}')\n\n    def workspace_contents(self, **kwargs) -&gt; list:\n        \"\"\"Returns items form the workspace\"\"\"\n        return self.get(f'workspaces/{self.workspace_id}/contents', params=kwargs)[\n            'items'\n        ]\n\n    def workspace_search(self, query: str | None = None, **kwargs) -&gt; list:\n        \"\"\"Performs a search of a workspace and returns the items found\"\"\"\n        if len(query) &gt; 20:\n            query = query[-20:]\n        if query:\n            kwargs['query'] = query\n        if not kwargs.get('kind'):\n            kwargs['kind'] = 'asset'\n        return self.get(f'workspaces/{self.workspace_id}/search', params=kwargs)[\n            'items'\n        ]\n\n    def asset(self, asset_id: str, **kwargs) -&gt; dict:\n        return self.get(f'/assets/{asset_id}', params=kwargs)\n\n    def asset_download(self, asset_id: str, **kwargs) -&gt; dict:\n        return self.get(f'/assets/{asset_id}/download', params=kwargs)\n\n    @json\n    def get(self, *args, **kwargs):\n        log.debug(f'GET {args} {kwargs}')\n        return self.client.get(*args, **kwargs)\n\n    @json\n    def post(self, *args, **kwargs):\n        return self.client.post(*args, **kwargs)\n\n    def __call__(self, path: str, **kwds: Any) -&gt; Any:\n        \"\"\"Default action: make GET request to Sony CI.\"\"\"\n        return self.get(path, **kwds)\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.auth","title":"<code>auth: OAuth2AccessTokenAuth</code>  <code>property</code>","text":"<p>Create and cache an OAuth2AccessTokenAuth instance.</p> <p>This will refresh the token automatically if it is expired.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.client","title":"<code>client: ApiClient</code>  <code>property</code>","text":"<p>Create and cache an ApiClient instance.</p> Example <pre><code>ci.client.get('workspaces')\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.model_config","title":"<code>model_config: ClassVar = {'arbitrary_types_allowed': True}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A SonyCI client.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.oauth","title":"<code>oauth: OAuth2Client</code>  <code>property</code>","text":"<p>Create and cache an OAuth2Client instance.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.token","title":"<code>token: BearerToken</code>  <code>property</code>","text":"<p>Get a token from SonyCI and cache the results.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.__call__","title":"<code>__call__(path, **kwds)</code>","text":"<p>Default action: make GET request to Sony CI.</p> Source code in <code>sonyci/sonyci.py</code> <pre><code>def __call__(self, path: str, **kwds: Any) -&gt; Any:\n    \"\"\"Default action: make GET request to Sony CI.\"\"\"\n    return self.get(path, **kwds)\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.workspace","title":"<code>workspace()</code>","text":"<p>Return response of /workspaces/{workspace_id}</p> Source code in <code>sonyci/sonyci.py</code> <pre><code>def workspace(self) -&gt; dict:\n    \"\"\"Return response of /workspaces/{workspace_id}\"\"\"\n    return self.get(f'workspaces/{self.workspace_id}')\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.workspace_contents","title":"<code>workspace_contents(**kwargs)</code>","text":"<p>Returns items form the workspace</p> Source code in <code>sonyci/sonyci.py</code> <pre><code>def workspace_contents(self, **kwargs) -&gt; list:\n    \"\"\"Returns items form the workspace\"\"\"\n    return self.get(f'workspaces/{self.workspace_id}/contents', params=kwargs)[\n        'items'\n    ]\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.workspace_search","title":"<code>workspace_search(query=None, **kwargs)</code>","text":"<p>Performs a search of a workspace and returns the items found</p> Source code in <code>sonyci/sonyci.py</code> <pre><code>def workspace_search(self, query: str | None = None, **kwargs) -&gt; list:\n    \"\"\"Performs a search of a workspace and returns the items found\"\"\"\n    if len(query) &gt; 20:\n        query = query[-20:]\n    if query:\n        kwargs['query'] = query\n    if not kwargs.get('kind'):\n        kwargs['kind'] = 'asset'\n    return self.get(f'workspaces/{self.workspace_id}/search', params=kwargs)[\n        'items'\n    ]\n</code></pre>"}]}