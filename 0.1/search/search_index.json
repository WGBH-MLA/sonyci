{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SonyCi","text":"<p>A SonyCi API client for Python</p>"},{"location":"#install","title":"Install","text":"<p>Install instructions can be found on the install page</p>"},{"location":"#reference","title":"Reference","text":"<p>Further details can be found in the reference section</p>"},{"location":"#credits","title":"Credits","text":"<p>Created by WGBH-MLA for the CLAMS project</p>"},{"location":"install/","title":"Install","text":""},{"location":"install/#clone-the-repository","title":"Clone the repository::","text":"<pre><code>git clone https://github.com/WGBH-MLA/sonyci.git\ncd sonyci\n</code></pre>"},{"location":"install/#install-with-pdm","title":"Install with PDM","text":"<p>PDM is used as the packaging manager. It can be installed with <code>pip install pdm</code>.</p> <p>Install the project with development dependencies:</p> <pre><code>pdm install\n</code></pre> <p>Activate your virtual environment</p> <pre><code>$(pdm venv activate)\n</code></pre> <p>What is <code>$(pdm venv activate)</code>?</p> <p><code>pdm venv activate</code> outputs the command needed to activate your virtual environment.</p> <p>The <code>$()</code> wrapper evaluates it in your current shell context.</p> Install with venv <p>If PDM is not available, it can also be installed with pip. It is recommeneded to install to a virtual environment using <code>venv</code>:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Install the package</p> <pre><code>pip install .\n</code></pre> <p>Deactivate</p> <p>To deactivate the virtual environmet, run the <code>deactivate</code> command.</p> <pre><code>deactivate\n</code></pre>"},{"location":"install/#login","title":"Login","text":"<p>The first time you run the application, you will need to get an access token. You can do this with the <code>login</code> command:</p> <pre><code>ci login\n</code></pre>"},{"location":"install/#credentials","title":"Credentials","text":"<p>You will need to provide your <code>username</code> and <code>password</code>, as well as your <code>client_id</code> and <code>client_secret</code>. These can be provided as command line options, or (recommended) as <code>ENVIRONMENT_VARIABLES</code>:</p> <p>Create a file called <code>.cred</code> with the following contents, and add your credentials:</p> <pre><code>export CI_USERNAME=\nexport CI_PASSWORD=\nexport CI_CLIENT_ID=\nexport CI_CLIENT_SECRET=\nexport CI_WORKSPACE_ID=\n</code></pre> <p>Activate the variables:</p> <pre><code>source .cred\n</code></pre> <p>Dot notation</p> <p>Alternate notation (may not be available in your terminal):</p> <pre><code>. .cred\n</code></pre> <p>Now you can login and get an access token:</p> <pre><code>ci login\n</code></pre> <p>This will save a file called <code>.token</code> in the current directory. This file will be used to authenticate future requests, and you do not need to login again until the token expires.</p>"},{"location":"install/#run-the-application","title":"Run the application","text":"<p>Now you are ready to run the application:</p> <pre><code>ci -h\n</code></pre> <p>See the CLI reference for more details.</p>"},{"location":"reference/","title":"Reference","text":"<p>This section describes the implementation of specific code modules.</p>"},{"location":"reference/#modules","title":"Modules","text":"<ul> <li>SonyCi - the primary module</li> <li>CLI - the CLI interface</li> </ul>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#sonyci.cli.login","title":"<code>login(username=Option(Ellipsis, '--username', '-u', help='Sony CI username.', envvar='CI_USERNAME'), password=Option(Ellipsis, '--password', '-p', help='Sony CI password.', envvar='CI_PASSWORD'), client_id=Option(Ellipsis, '--client-id', '-c', help='Sony CI client ID.', envvar='CI_CLIENT_ID'), client_secret=Option(Ellipsis, '--client-secret', '-s', help='Sony CI client secret.', envvar='CI_CLIENT_SECRET'))</code>","text":"<p>Login to Sony CI.</p> Source code in <code>sonyci/cli.py</code> <pre><code>@app.command()\ndef login(\n    username: str = Option(\n        ..., '--username', '-u', help='Sony CI username.', envvar='CI_USERNAME'\n    ),\n    password: str = Option(\n        ..., '--password', '-p', help='Sony CI password.', envvar='CI_PASSWORD'\n    ),\n    client_id: str = Option(\n        ..., '--client-id', '-c', help='Sony CI client ID.', envvar='CI_CLIENT_ID'\n    ),\n    client_secret: str = Option(\n        ...,\n        '--client-secret',\n        '-s',\n        help='Sony CI client secret.',\n        envvar='CI_CLIENT_SECRET',\n    ),\n):\n\"\"\"Login to Sony CI.\"\"\"\n    from sonyci.sonyci import get_token\n\n    token: BearerToken = get_token(username, password, client_id, client_secret)\n    with open('.token', 'w') as f:\n        f.write(BearerTokenSerializer().dumps(token))\n        log.success('logged in to Sony CI!')\n</code></pre>"},{"location":"reference/cli/#sonyci.cli.version_callback","title":"<code>version_callback(value)</code>","text":"<p>Print the version of the program and exit.</p> Source code in <code>sonyci/cli.py</code> <pre><code>def version_callback(value: bool):\n\"\"\"Print the version of the program and exit.\"\"\"\n    if value:\n        from ._version import __version__\n\n        print(f'v{__version__}')\n\n        raise Exit()\n</code></pre>"},{"location":"reference/sonyci/","title":"SonyCi","text":""},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi","title":"<code>SonyCi</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>SonyCI API client</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>SonyCI username.</p> <code>password</code> <code>str</code> <p>SonyCI password.</p> <code>client_id</code> <code>str</code> <p>SonyCI client ID.</p> <code>client_secret</code> <code>str</code> <p>SonyCI client secret.</p> <code>workspace_id</code> <code>str</code> <p>SonyCI workspace ID.</p> <code>token</code> <code>BearerToken</code> <p>SonyCI token.</p> Source code in <code>sonyci/sonyci.py</code> <pre><code>class SonyCi(BaseModel, extra='allow'):\n\"\"\"SonyCI API client\n\n    Attributes:\n        username (str, optional): SonyCI username.\n        password (str): SonyCI password.\n        client_id (str): SonyCI client ID.\n        client_secret (str): SonyCI client secret.\n        workspace_id (str): SonyCI workspace ID.\n        token (BearerToken): SonyCI token.\n\n    \"\"\"\n\n    base_url: str = BASE_URL\n    token_url: str = TOKEN_URL\n    username: str | None = None\n    password: str | None = None\n    client_id: str | None = None\n    client_secret: str | None = None\n    workspace_id: str | None = None\n\n    @cached_property\n    def oauth(self) -&gt; OAuth2Client:\n\"\"\"Create and cache an OAuth2Client instance.\"\"\"\n        return OAuth2Client(\n            token_endpoint=self.token_url,\n            auth=(self.username, self.password),\n            data={\n                'grant_type': 'password',\n                'client_id': self.client_id,\n                'client_secret': self.client_secret,\n            },\n        )\n\n    @cached_property\n    def token(self) -&gt; BearerToken:\n\"\"\"Get a token from SonyCI and cache the results.\"\"\"\n        return get_token(\n            self.username, self.password, self.client_id, self.client_secret\n        )\n\n    @cached_property\n    def auth(self) -&gt; OAuth2AccessTokenAuth:\n\"\"\"Create and cache an OAuth2AccessTokenAuth instance.\n\n        This will refresh the token automatically if it is expired.\n        \"\"\"\n        return OAuth2AccessTokenAuth(client=self.oauth, token=self.token)\n\n    @cached_property\n    def client(self) -&gt; ApiClient:\n\"\"\"Create and cache an ApiClient instance.\n\n        Example:\n            ```py\n            ci.client.get('workspaces')\n            ```\n        \"\"\"\n        return ApiClient(self.base_url, auth=self.auth)\n\n    @property\n    def workspace(self) -&gt; str:\n\"\"\"Return the workspace prefix for API calls.\"\"\"\n        return f'workspaces/{self.workspace_id}'\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.auth","title":"<code>auth: OAuth2AccessTokenAuth</code>  <code>cached</code> <code>property</code>","text":"<p>Create and cache an OAuth2AccessTokenAuth instance.</p> <p>This will refresh the token automatically if it is expired.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.client","title":"<code>client: ApiClient</code>  <code>cached</code> <code>property</code>","text":"<p>Create and cache an ApiClient instance.</p> Example <pre><code>ci.client.get('workspaces')\n</code></pre>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.oauth","title":"<code>oauth: OAuth2Client</code>  <code>cached</code> <code>property</code>","text":"<p>Create and cache an OAuth2Client instance.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.token","title":"<code>token: BearerToken</code>  <code>cached</code> <code>property</code>","text":"<p>Get a token from SonyCI and cache the results.</p>"},{"location":"reference/sonyci/#sonyci.sonyci.SonyCi.workspace","title":"<code>workspace: str</code>  <code>property</code>","text":"<p>Return the workspace prefix for API calls.</p>"}]}